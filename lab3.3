-- Задача 1
-- Требуется представить имя каждого сотрудника таблицы EMP
-- а также имя его руководителя:
SELECT t1.empname || ' works for ' || t2.empname as Emp_Manager
FROM emp t1, emp t2
WHERE t1.manager_id = t2.empno;
-- рефлексивное объединение EMP
-- Обратите внимание на отсутствие в результирующем множестве строк сотрудника
-- JOHN KLINTON (в начале строки), значение столбца MANAGER_ID которого
-- -- неопределенно (NULL).
-- Как видите, декартово произведение возвращает все возможные соче!
-- тания EMPNO/EMPNO (это выглядит так, как будто руководителем
-- служащего с EMPNO 7369 являются все остальные сотрудники, пред!
-- ставленные в таблице, включая EMPNO 7369).
-- Следующий шаг – фильтруем результаты так, чтобы осталось по одной
-- строке для каждого служащего и EMPNO его руководителя. Осуществ!
-- ляем это, проводя объединение по MGR и EMPNO:
 
-- Требуется представить имя каждого сотрудника таблицы EMP (даже сотрудника,
-- которому не назначен руководитель) и имя его руководителя.
-- Результирующий набор строк первого запроса:
 
SELECT t2.empname || ' works for ' || t1.empname as Emp_Manager  
FROM emp t1 RIGHT OUTER JOIN emp t2
ON t1.empno = t2.manager_id;
-- Чтобы увидеть стро!
-- ку служащего KING при использовании метода с рефлексивным объ!
-- единением, необходимо выполнить внешнее объединение, как показа!
-- но в следующих двух запросах.
 
 
-- Задача
-- Требуется показать иерархию от CLARK до JOHN KLINTON:
-- Используйте функцию SYS_CONNECT_BY_PATH получите CLARK и его
-- руководителя ALLEN, затем руководителя ALLEN ― JOHN KLINTON.
-- Для
-- обхода дерева используйте оператор CONNECT BY.
-- А также
-- ключевые слова иерархических запросов LEVEL, START WITH, CONNECT BY
-- PRIOR; функцию LTRIM.
SELECT ltrim(sys_connect_by_path(empname,'-->'), '-->') leaf___branch___root
FROM emp
WHERE level = 3
    START WITH empname = 'CLARK'
    CONNECT BY PRIOR manager_id = empno;
-- SYS_CONNECT_BY_PATH is valid only in hierarchical queries.
-- It returns the path of a column value from root to node, with column
-- values separated by char for each row returned by CONNECT BY condition.
 
 
-- В решении для Oracle всю работу выполняет оператор CONNECT BY.
-- Начиная с CLARK, проходим весь путь до JOHN KLIN без всяких объедине!
-- ний. Выражение в операторе CONNECT BY определяет отношения ме!
-- жду данными и то, как будет выполняться обход дерева:
 
 
-- 4. Иерархическое представление таблицы
SELECT ltrim(sys_connect_by_path(empname,'-->'), '-->') emp_tree
FROM emp
    START WITH manager_id IS NULL
    CONNECT BY PRIOR empno = manager_id
ORDER BY 1;
 
-- 5. Представление уровня иерархии
-- Требуется показать уровень иерархии каждого сотрудника:
-- SHOW LPAD('Page 1',15,'*.')
-- *.*.*.*.*Page 1
SELECT lpad(empname,2*(level - 1) + length(empname),'.') emp_tree
    FROM emp
    START WITH manager_id IS NULL  
    CONNECT BY PRIOR empno = manager_id;
 
 
-- 6
-- Требуется найти всех служащих, которые явно или  неявно подчиняются ALLEN:
SELECT empname  
FROM emp
START WITH empname = 'ALLEN'
CONNECT BY PRIOR empno = manager_id ;
